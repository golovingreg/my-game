{"version":3,"sources":["Dice.js","characters/monsters.js","components/Enemy.js","components/Log.js","characters/players.js","components/Player.js","components/Actions.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Dice","set","bigRoll","how","one","result","i","forEach","item","push","Math","floor","random","roll","dragon","name","str","def","hp","wis","dex","attack","target","check","damage","console","log","this","flee","escCheck","Enemy","Component","Log","className","knight","Player","Actions","onClick","Info","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8cd7a37.chunk.js","sourcesContent":["// import React from 'react';\n\n\n\nconst Dice = {\n\tset: [4,6,8,10,12,20],\n\tbigRoll: (how, one) => {\n\t\tlet result = [];\n\t\tfor (let i = 0; i < how; i++) {\n\t\t\tDice.set.forEach(item => {\n\t\t\t\tif (one === item) {\n\t\t\t\t\tresult.push(Math.floor(Math.random() * (one - 1) ) + 1);\n\t\t\t\t} \n\t\t\t});\n\t\t}\n\t\treturn result;\n\t},\n\troll: (one) => {\n\t\tlet result;\n\t\tDice.set.forEach(item => {\n\t\t\tif (one === item) {\n\t\t\t\tresult = (Math.floor(Math.random() * (one - 1) ) + 1);\n\t\t\t} \n\t\t});\n\t\treturn result;\t\n\t}\n\n}\n\n\nexport default Dice;","import Dice from '../Dice';\n\nconst dragon = {\n\tname: \"Dragon\",\n\tstr: 12,\n\tdef: 5,\n\thp: 50,\n\twis: 10,\n\tdex: 10,\n\tattack(target) {\n\t\tconsole.log(`${this.name} attacks ${target.name}`);\n\t\tlet check;\n\t\tlet damage;\n\t\tcheck = Dice.roll(20);\n\t\tif (check > target.def) {\n\t\t\tconsole.log(\n`attack check is ${check}\n${target.name}'s def is ${target.def}\n${this.name} attacks`);\n\t\t\tdamage = Dice.roll(6) + (this.str / 2);\n\t\t\ttarget.hp = target.hp - damage;\n\t\t\tconsole.log(`${damage} damade dealt and ${target.name} has ${target.hp} hp points left`);\n\t\t} else {\n\t\t\tconsole.log(\n`attack check is ${check}\n${target.name}'s def is ${target.def}\n${target.name} blocks`\n\t\t\t);\n\t\t}\n\t},\n\tflee(target) {\n\t\tconsole.log(`${this.name} tries to escape from ${target.name}`);\n\t\tlet escCheck = Dice.roll(20) + (this.dex/2);\n\t\tif (escCheck > target.wis) {\n\t\t\tconsole.log(\n`escape check is ${escCheck}\n${target.name}'s wisdom is ${target.wis}\n${this.name} escapes`);\n\t\t} else {\n\t\t\tconsole.log(\n`escape check is ${escCheck}\n${target.name}'s wisdom is ${target.wis}\n${this.name} can't escape and the fight continues`\n\t\t\t\t);\n\t\t}\n\t}\n}\n\n\nexport default dragon;","import React, { Component } from 'react';\nimport dragon from '../characters/monsters';\n\n\nclass Enemy extends Component {\n\n\t\t\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<h2>Your enemy:</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>{dragon.name}</li>\n\t\t\t\t\t<li>HP: {dragon.hp}</li>\n\t\t\t\t\t<li>Defense: {dragon.def}</li> \n\t\t\t\t\t<li>Strength: {dragon.str}</li> \n\t\t\t\t\t<li>Dexterity: {dragon.dex}</li> \n\t\t\t\t\t<li>Wisdom: {dragon.wis}</li> \n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Enemy;","import React, { Component } from 'react';\nimport Enemy from './Enemy.js';\n\n\n\n\n\nclass Log extends Component {\n\trender() {\n\t\treturn(\n\t\t<div className=\"log\">\n\t\t\t<div>\n\t\t\t\t<h1>log</h1>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Enemy />\n\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\t\n}\n\nexport default Log;","import Dice from '../Dice';\n\nconst knight = {\n\tname: \"Knight\",\n\tstr: 18,\n\tdef: 10,\n\thp: 30,\n\twis: 10,\n\tdex: 10,\n\tattack(target) {\n\t\tconsole.log(`${this.name} attacks ${target.name}`);\n\t\tlet check;\n\t\tlet damage;\n\t\tcheck = Dice.roll(20);\n\t\tif (check > target.def) {\n\t\t\tconsole.log(\n`attack check is ${check}\n${target.name}'s def is ${target.def}\n${this.name} attacks`);\n\t\t\tdamage = Dice.roll(6) + (this.str / 2);\n\t\t\ttarget.hp = target.hp - damage;\n\t\t\tconsole.log(`${damage} damade dealt and ${target.name} has ${target.hp} hp points left`);\n\t\t} else {\n\t\t\tconsole.log(\n`attack check is ${check}\n${target.name}'s def is ${target.def}\n${target.name} blocks`\n\t\t\t);\n\t\t}\n\t},\n\tflee(target) {\n\t\tconsole.log(`${this.name} tries to escape from ${target.name}`);\n\t\tlet escCheck = Dice.roll(20) + (this.dex/2);\n\t\tif (escCheck > target.wis) {\n\t\t\tconsole.log(\n`escape check is ${escCheck}\n${target.name}'s wisdom is ${target.wis}\n${this.name} escapes`);\n\t\t} else {\n\t\t\tconsole.log(\n`escape check is ${escCheck}\n${target.name}'s wisdom is ${target.wis}\n${this.name} can't escape and the fight continues`\n\t\t\t\t);\n\t\t}\n\t}\n}\n\nexport default knight;","import React from 'react';\nimport knight from '../characters/players.js';\n\n\n\nconst Player = () => {\n\treturn(\n\t\t<div>\n\t\t\t<h1>Your character:</h1>\n\t\t\t<ul>\n\t\t\t\t<li>{knight.name}</li>\n\t\t\t\t<li>HP: {knight.hp}</li>\n\t\t\t\t<li>Defense: {knight.def}</li> \n\t\t\t\t<li>Strength: {knight.str}</li> \n\t\t\t\t<li>Dexterity: {knight.dex}</li> \n\t\t\t\t<li>Wisdom: {knight.wis}</li> \n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n\nexport default Player;","import React, { Component } from 'react';\nimport knight from '../characters/players.js';\nimport dragon from '../characters/monsters.js';\n\n\n\n\n\n\nclass Actions extends Component {\n\trender() {\n\t\treturn(\n\t\t<div>\n\t\t\t<button onClick={() => knight.attack(dragon)}>Attack</button>\n\t\t\t<button onClick={() => knight.flee(dragon)}>Flee</button>\n\t\t</div>\t\n\t\t)\n\t}\t\n}\n\nexport default Actions;","import React from 'react';\n\n\n\n\nconst Info = () => {\n\treturn(\n\t\t<h1>Some Info will be here</h1>\n\t)\n}\n\nexport default Info;","import React, { Component } from 'react';\nimport './App.css';\nimport Log from './components/Log';\nimport Player from './components/Player';\nimport Actions from './components/Actions';\nimport Info from './components/Info';\n// import Dice from './Dice';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"part\"><Log /></div>\n        <div className=\"part\"><Player /></div>\n        <div className=\"part\"><Actions /></div>\n        <div className=\"part\"><Info /></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}